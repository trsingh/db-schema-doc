package com.finzly.dbschemadoc.service;

import com.finzly.dbschemadoc.model.ColumnSchema;
import com.finzly.dbschemadoc.model.DatabaseSchema;
import com.finzly.dbschemadoc.model.TableSchema;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Service for generating HTML reports from database schema.
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class HtmlReportService {

    private final DiagramGenerationService diagramGenerationService;

    public String generateHtmlReport(DatabaseSchema schema) {
        log.info("Generating HTML report for database: {}", schema.getDatabaseName());
        
        StringBuilder html = new StringBuilder();
        
        // HTML header
        html.append("<!DOCTYPE html>\n")
            .append("<html lang=\"en\">\n")
            .append("<head>\n")
            .append("    <meta charset=\"UTF-8\">\n")
            .append("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n")
            .append("    <title>Database Schema Report</title>\n")
            .append("    <style>\n")
            .append(generateCss())
            .append("    </style>\n")
            .append("</head>\n")
            .append("<body>\n");

        // Header section
        html.append("    <div class=\"header\">\n")
            .append("        <h1>").append(schema.getDatabaseProductName()).append(" Database Schema</h1>\n")
            .append("        <div class=\"database-info\">\n")
            .append("            <p><strong>Database:</strong> ").append(schema.getDatabaseName()).append("</p>\n")
            .append("            <p><strong>Version:</strong> ").append(schema.getDatabaseProductVersion()).append("</p>\n")
            .append("            <p><strong>User:</strong> ").append(schema.getUserName()).append("</p>\n")
            .append("            <p><strong>Generated on:</strong> ").append(getCurrentTimestamp()).append("</p>\n")
            .append("        </div>\n")
            .append("    </div>\n");

        // Database schema diagram disabled for performance

        // Statistics section
        html.append("    <div class=\"statistics\">\n")
            .append("        <h2>Database Statistics</h2>\n")
            .append("        <div class=\"stats-grid\">\n")
            .append("            <div class=\"stat-item\">\n")
            .append("                <span class=\"stat-number\">").append(schema.getSchemas().size()).append("</span>\n")
            .append("                <span class=\"stat-label\">Total Schemas</span>\n")
            .append("            </div>\n")
            .append("            <div class=\"stat-item\">\n")
            .append("                <span class=\"stat-number\">").append(schema.getTables().size()).append("</span>\n")
            .append("                <span class=\"stat-label\">Total Tables</span>\n")
            .append("            </div>\n")
            .append("            <div class=\"stat-item\">\n")
            .append("                <span class=\"stat-number\">").append(getTotalColumns(schema)).append("</span>\n")
            .append("                <span class=\"stat-label\">Total Columns</span>\n")
            .append("            </div>\n")
            .append("            <div class=\"stat-item\">\n")
            .append("                <span class=\"stat-number\">").append(getViewCount(schema)).append("</span>\n")
            .append("                <span class=\"stat-label\">Total Views</span>\n")
            .append("            </div>\n")
            .append("        </div>\n")
            .append("    </div>\n");

        // Tables section
        html.append("    <div class=\"tables-section\">\n")
            .append("        <h2>Tables and Columns</h2>\n");

        for (TableSchema table : schema.getTables()) {
            html.append(generateTableHtml(table));
        }

        html.append("    </div>\n");

        // Footer
        html.append("    <div class=\"footer\">\n")
            .append("        <p>Generated by DB Schema Doc - ").append(getCurrentTimestamp()).append("</p>\n")
            .append("    </div>\n")
            .append("</body>\n")
            .append("</html>");

        return html.toString();
    }

    private String generateTableHtml(TableSchema table) {
        StringBuilder html = new StringBuilder();
        
        html.append("        <div class=\"table-container\">\n")
            .append("            <h3 class=\"table-name\">").append(table.getTableName()).append("</h3>\n")
            .append("            <div class=\"table-info\">\n")
            .append("                <span class=\"table-type\">").append(table.getTableType()).append("</span>\n")
            .append("                <span class=\"schema-name\">Schema: ").append(table.getSchemaName()).append("</span>\n")
            .append("            </div>\n");

        if (table.getRemarks() != null && !table.getRemarks().isEmpty()) {
            html.append("            <p class=\"table-description\">").append(table.getRemarks()).append("</p>\n");
        }

        // Columns table
        html.append("            <table class=\"schema-table\">\n")
            .append("                <thead>\n")
            .append("                    <tr>\n")
            .append("                        <th>Column</th>\n")
            .append("                        <th>Data Type</th>\n")
            .append("                        <th>Size</th>\n")
            .append("                        <th>Nullable</th>\n")
            .append("                        <th>Default</th>\n")
            .append("                        <th>Key</th>\n")
            .append("                        <th>Remarks</th>\n")
            .append("                    </tr>\n")
            .append("                </thead>\n")
            .append("                <tbody>\n");

        for (ColumnSchema column : table.getColumns()) {
            html.append("                    <tr>\n")
                .append("                        <td class=\"").append(column.isPrimaryKey() ? "primary-key" : "").append("\">")
                .append(column.getColumnName()).append("</td>\n")
                .append("                        <td>").append(column.getDataType()).append("</td>\n")
                .append("                        <td>").append(column.getColumnSize() != null ? column.getColumnSize() : "-").append("</td>\n")
                .append("                        <td>").append(column.isNullable() ? "YES" : "NO").append("</td>\n")
                .append("                        <td>").append(column.getDefaultValue() != null ? column.getDefaultValue() : "-").append("</td>\n")
                .append("                        <td>");
            
            if (column.isPrimaryKey()) {
                html.append("<span class=\"key-badge pk\">PK</span>");
            }
            if (column.isForeignKey()) {
                html.append("<span class=\"key-badge fk\">FK</span>");
            }
            if (!column.isPrimaryKey() && !column.isForeignKey()) {
                html.append("-");
            }
            
            html.append("</td>\n")
                .append("                        <td>").append(column.getRemarks() != null ? column.getRemarks() : "-").append("</td>\n")
                .append("                    </tr>\n");
        }

        html.append("                </tbody>\n")
            .append("            </table>\n");

        // Foreign Keys section
        if (!table.getForeignKeys().isEmpty()) {
            html.append("            <h4>Relationships</h4>\n")
                .append("            <div class=\"foreign-keys\">\n");
            
            for (TableSchema.ForeignKey fk : table.getForeignKeys()) {
                html.append("                <div class=\"fk-relationship\">\n")
                    .append("                    ").append(fk.getColumnName()).append(" â†’ ")
                    .append(fk.getReferencedTable()).append(".").append(fk.getReferencedColumn()).append("\n")
                    .append("                </div>\n");
            }
            
            html.append("            </div>\n");
        }

        html.append("        </div>\n");
        return html.toString();
    }

    private String generateCss() {
        return """
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                margin: 0;
                padding: 20px;
                background-color: #f5f5f5;
                color: #333;
            }
            .header {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 30px;
                border-radius: 10px;
                margin-bottom: 30px;
                box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            }
            .header h1 {
                margin: 0 0 20px 0;
                font-size: 2.5em;
                font-weight: 300;
            }
            .database-info p {
                margin: 5px 0;
                font-size: 1.1em;
            }
            .statistics {
                background: white;
                padding: 25px;
                border-radius: 10px;
                margin-bottom: 30px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            .statistics h2 {
                margin-top: 0;
                color: #333;
                border-bottom: 2px solid #eee;
                padding-bottom: 10px;
            }
            .stats-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                margin-top: 20px;
            }
            .stat-item {
                text-align: center;
                padding: 20px;
                background: #f8f9fa;
                border-radius: 8px;
                border-left: 4px solid #667eea;
            }
            .stat-number {
                display: block;
                font-size: 2.5em;
                font-weight: bold;
                color: #667eea;
            }
            .stat-label {
                display: block;
                margin-top: 5px;
                color: #666;
                text-transform: uppercase;
                font-size: 0.9em;
                letter-spacing: 1px;
            }
            .tables-section {
                background: white;
                padding: 25px;
                border-radius: 10px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            .tables-section h2 {
                margin-top: 0;
                color: #333;
                border-bottom: 2px solid #eee;
                padding-bottom: 10px;
            }
            .table-container {
                margin-bottom: 40px;
                border: 1px solid #e1e5e9;
                border-radius: 8px;
                overflow: hidden;
            }
            .table-name {
                background: #f8f9fa;
                margin: 0;
                padding: 15px 20px;
                font-size: 1.3em;
                color: #2c3e50;
                border-bottom: 1px solid #e1e5e9;
            }
            .table-info {
                padding: 10px 20px;
                background: #f8f9fa;
                font-size: 0.9em;
                color: #666;
            }
            .table-type {
                background: #007bff;
                color: white;
                padding: 2px 8px;
                border-radius: 4px;
                font-size: 0.8em;
                margin-right: 10px;
            }
            .table-description {
                padding: 15px 20px;
                margin: 0;
                background: #f8f9fa;
                font-style: italic;
                color: #666;
                border-bottom: 1px solid #e1e5e9;
            }
            .schema-table {
                width: 100%;
                border-collapse: collapse;
                font-size: 0.9em;
            }
            .schema-table th {
                background: #6c757d;
                color: white;
                padding: 12px 8px;
                text-align: left;
                font-weight: 600;
                text-transform: uppercase;
                font-size: 0.8em;
                letter-spacing: 0.5px;
            }
            .schema-table td {
                padding: 10px 8px;
                border-bottom: 1px solid #e1e5e9;
            }
            .schema-table tr:hover {
                background-color: #f8f9fa;
            }
            .primary-key {
                font-weight: bold;
                color: #e74c3c;
            }
            .key-badge {
                padding: 2px 6px;
                border-radius: 3px;
                font-size: 0.7em;
                font-weight: bold;
                margin-right: 4px;
            }
            .key-badge.pk {
                background: #e74c3c;
                color: white;
            }
            .key-badge.fk {
                background: #f39c12;
                color: white;
            }
            .foreign-keys {
                padding: 15px 20px;
                background: #f8f9fa;
            }
            .fk-relationship {
                padding: 5px 0;
                font-family: monospace;
                color: #555;
            }
            .footer {
                text-align: center;
                padding: 20px;
                margin-top: 30px;
                color: #666;
                font-size: 0.9em;
            }
            """;
    }

    private int getTotalColumns(DatabaseSchema schema) {
        return schema.getTables().stream()
                .mapToInt(table -> table.getColumns().size())
                .sum();
    }

    private int getViewCount(DatabaseSchema schema) {
        return (int) schema.getTables().stream()
                .filter(table -> "VIEW".equalsIgnoreCase(table.getTableType()))
                .count();
    }

    private String getCurrentTimestamp() {
        return LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    }
}
